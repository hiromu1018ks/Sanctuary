generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js標準スキーマ
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth.jsの必須リレーション
  accounts Account[]
  sessions Session[]

  // Sanctuaryアプリとの連携
  profile UserProfile?

  @@map("User")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

// Sanctuaryアプリ固有の情報
model UserProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  nickname         String   @db.VarChar(50)
  selfIntroduction String?
  profileImageUrl  String?  @db.VarChar(500)
  gratitudePoints  Int      @default(0)
  currentTreeStage String   @default("seed") @db.VarChar(50)
  status           String   @default("pending") @db.VarChar(20)
  role             String   @default("user") @db.VarChar(20)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // リレーション
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts     Post[]
  reactions Reaction[]

  @@index([gratitudePoints])
  @@index([status])
  @@index([role])
  @@map("UserProfile")
}

model Post {
  id             String    @id @default(cuid())
  userProfileId  String
  content        String
  templateType   String?   @db.VarChar(20)
  status         String    @default("pending") @db.VarChar(20)
  aiReviewPassed Boolean?
  reviewReason   String?
  approvedAt     DateTime? @db.Timestamp(6)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // リレーション
  userProfile UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  reactions   Reaction[]

  @@index([approvedAt])
  @@index([createdAt])
  @@index([status])
  @@map("Post")
}

model Reaction {
  id            String   @id @default(cuid())
  postId        String
  userProfileId String
  reactionType  String   @db.VarChar(20)
  createdAt     DateTime @default(now())

  // リレーション
  post        Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  userProfile UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@unique([postId, userProfileId, reactionType])
  @@index([postId])
  @@index([reactionType])
  @@map("Reaction")
}
